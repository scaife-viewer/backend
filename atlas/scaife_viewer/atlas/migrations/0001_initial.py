# Generated by Django 2.2.15 on 2020-08-13 16:42

import django.db.models.deletion
from django.db import migrations, models

import sortedm2m.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ImageAnnotation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[("canvas", "Canvas")], default="canvas", max_length=7
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict
                    ),
                ),
                (
                    "image_identifier",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "canvas_identifier",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("idx", models.IntegerField(help_text="0-based index")),
                ("urn", models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Node",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("path", models.CharField(max_length=255, unique=True)),
                ("depth", models.PositiveIntegerField()),
                ("numchild", models.PositiveIntegerField(default=0)),
                (
                    "idx",
                    models.IntegerField(
                        blank=True, help_text="0-based index", null=True
                    ),
                ),
                ("kind", models.CharField(max_length=255)),
                ("urn", models.CharField(max_length=255, unique=True)),
                ("ref", models.CharField(blank=True, max_length=255, null=True)),
                ("rank", models.IntegerField(blank=True, null=True)),
                ("text_content", models.TextField(blank=True, null=True)),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, null=True
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="TextAlignment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=255, null=True)),
                ("slug", models.SlugField()),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict
                    ),
                ),
                (
                    "version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="text_alignments",
                        to="scaife_viewer_atlas.Node",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Token",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="the tokenized value of a text part (usually whitespace separated)",
                        max_length=255,
                    ),
                ),
                (
                    "word_value",
                    models.CharField(
                        blank=True,
                        help_text="the normalized version of the value (no punctuation)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "subref_value",
                    models.CharField(
                        blank=True,
                        help_text="the value for the CTS subreference targeting a particular token",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "lemma",
                    models.CharField(
                        blank=True,
                        help_text="the lemma for the token value",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "gloss",
                    models.CharField(
                        blank=True,
                        help_text="the interlinear gloss",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "part_of_speech",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "tag",
                    models.CharField(
                        blank=True,
                        help_text="part-of-speech tag",
                        max_length=255,
                        null=True,
                    ),
                ),
                ("case", models.CharField(blank=True, max_length=255, null=True)),
                ("mood", models.CharField(blank=True, max_length=255, null=True)),
                ("position", models.IntegerField()),
                ("idx", models.IntegerField(help_text="0-based index")),
                (
                    "ve_ref",
                    models.CharField(
                        blank=True,
                        help_text="a human-readable reference to the token via a virtualized exemplar",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "text_part",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tokens",
                        to="scaife_viewer_atlas.Node",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TextAnnotation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        choices=[("scholia", "Scholia")],
                        default="scholia",
                        max_length=7,
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict
                    ),
                ),
                ("idx", models.IntegerField(help_text="0-based index")),
                ("urn", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "text_parts",
                    sortedm2m.fields.SortedManyToManyField(
                        help_text=None,
                        related_name="text_annotations",
                        to="scaife_viewer_atlas.Node",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TextAlignmentChunk",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("citation", models.CharField(max_length=13)),
                (
                    "items",
                    models.JSONField(
                        blank=True, default=list
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict
                    ),
                ),
                ("idx", models.IntegerField(help_text="0-based index")),
                (
                    "alignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="text_alignment_chunks",
                        to="scaife_viewer_atlas.TextAlignment",
                    ),
                ),
                (
                    "end",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="scaife_viewer_atlas.Node",
                    ),
                ),
                (
                    "start",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="scaife_viewer_atlas.Node",
                    ),
                ),
                (
                    "version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="text_alignment_chunks",
                        to="scaife_viewer_atlas.Node",
                    ),
                ),
            ],
            options={"ordering": ["idx"],},
        ),
        migrations.CreateModel(
            name="NamedEntity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "kind",
                    models.CharField(
                        choices=[("person", "Person"), ("place", "Place")], max_length=6
                    ),
                ),
                ("url", models.URLField()),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict
                    ),
                ),
                (
                    "idx",
                    models.IntegerField(
                        blank=True, help_text="0-based index", null=True
                    ),
                ),
                ("urn", models.CharField(max_length=255, unique=True)),
                (
                    "tokens",
                    models.ManyToManyField(
                        related_name="named_entities", to="scaife_viewer_atlas.Token"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MetricalAnnotation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict
                    ),
                ),
                ("html_content", models.TextField()),
                (
                    "short_form",
                    models.TextField(
                        help_text='"|" indicates the start of a foot, ":" indicates a syllable boundary within a foot and "/" indicates a caesura.'
                    ),
                ),
                ("idx", models.IntegerField(help_text="0-based index")),
                ("urn", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "text_parts",
                    sortedm2m.fields.SortedManyToManyField(
                        help_text=None,
                        related_name="metrical_annotations",
                        to="scaife_viewer_atlas.Node",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ImageROI",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict
                    ),
                ),
                ("image_identifier", models.CharField(max_length=255)),
                ("coordinates_value", models.CharField(max_length=255)),
                (
                    "image_annotation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roi",
                        to="scaife_viewer_atlas.ImageAnnotation",
                    ),
                ),
                (
                    "text_annotations",
                    sortedm2m.fields.SortedManyToManyField(
                        help_text=None,
                        related_name="roi",
                        to="scaife_viewer_atlas.TextAnnotation",
                    ),
                ),
                (
                    "text_parts",
                    sortedm2m.fields.SortedManyToManyField(
                        help_text=None,
                        related_name="roi",
                        to="scaife_viewer_atlas.Node",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="imageannotation",
            name="text_parts",
            field=sortedm2m.fields.SortedManyToManyField(
                help_text=None,
                related_name="image_annotations",
                to="scaife_viewer_atlas.Node",
            ),
        ),
        migrations.CreateModel(
            name="AudioAnnotation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict
                    ),
                ),
                ("asset_url", models.URLField()),
                ("idx", models.IntegerField(help_text="0-based index")),
                ("urn", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "text_parts",
                    sortedm2m.fields.SortedManyToManyField(
                        help_text=None,
                        related_name="audio_annotations",
                        to="scaife_viewer_atlas.Node",
                    ),
                ),
            ],
        ),
    ]
